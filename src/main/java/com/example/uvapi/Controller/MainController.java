package com.example.uvapi.Controller;

import java.sql.Date;
import java.util.List;

import com.example.uvapi.CadastroRepository;
import com.example.uvapi.CalendarQueryInterface;
import com.example.uvapi.CalendarRepository;
import com.example.uvapi.QueryInterface;
import com.example.uvapi.Model.Cadastro;
import com.example.uvapi.Model.Calendar;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller
@RequestMapping(path="/uvapi")
public class MainController {

    @Autowired // This means to get the bean called cadastroRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CadastroRepository cadastroRepository;

    @Autowired
    private CalendarRepository calendarRepository;

    @Autowired
    private QueryInterface queryInterface;

    @Autowired
    private CalendarQueryInterface calendarQueryInterface;

    @PostMapping(path="/cadastro/add") // Map ONLY POST Requests
    public @ResponseBody String addNewCadastro (@RequestParam String firstName, 
                                                @RequestParam String lastName, 
                                                @RequestParam String cnpj, 
                                                @RequestParam String companyName, 
                                                @RequestParam String cpf,
                                                @RequestParam String email,
                                                @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Cadastro cadastro = new Cadastro();
        cadastro.setFirstName(firstName);
        cadastro.setLastName(lastName);
        cadastro.setCNPJ(cnpj);
        cadastro.setCompanyName(companyName);
        cadastro.setCPF(cpf);
        cadastro.setEmail(email);
        cadastro.setPassword(password);
        cadastroRepository.save(cadastro);
        
        return "Saved";
    }

    @GetMapping(path="/cadastro/data")
    public @ResponseBody String getUserCadastro(@RequestParam String email,
                                                @RequestParam String password) {
        try {
            Cadastro cadastro = queryInterface.finCadastroByEmail(email).get(0);
            if( cadastro!=null && cadastro.getPassword().equals(password) ){
                JSONObject jsonResponse = new JSONObject();              
                try {
                    jsonResponse.put("cadastroId", cadastro.getId());
                    jsonResponse.put("firstName", cadastro.getFirstName());
                    jsonResponse.put("lastName", cadastro.getLastName());
                    jsonResponse.put("cnpj", cadastro.getCNPJ());
                    jsonResponse.put("companyName", cadastro.getCompanyName());
                    jsonResponse.put("cpf", cadastro.getCPF());

                } catch (JSONException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                    return "Fail";
                }

                return jsonResponse.toString();
            }
        } catch (IndexOutOfBoundsException e) {
            //TODO logar esta exceção da maneira correta
            e.printStackTrace();
        }

        return "Fail";
    }

    @PostMapping(path="/calendar/add")
    public @ResponseBody String addNewCalendar (@RequestParam Integer cadastroId, 
                                                @RequestParam String type, 
                                                @RequestParam String category, 
                                                @RequestParam String prunningDate, 
                                                @RequestParam String harvestDate, 
                                                @RequestParam Integer harvestDays, 
                                                @RequestParam Integer prunningRestDays,
                                                @RequestParam Integer producedAmountKg) {

        Calendar calendar = new Calendar();
        calendar.setCadastroId(cadastroId);
        calendar.setType(type);
        calendar.setCategory(category);
        calendar.setPrunningDate(Date.valueOf(prunningDate));
        calendar.setHarvestDate(Date.valueOf(harvestDate));
        calendar.setHarvestDays(harvestDays);
        calendar.setPrunningRestDays(prunningRestDays);
        calendar.setProducedAmountKg(producedAmountKg);
        calendarRepository.save(calendar);

        return "Saved";
    }

    @GetMapping(path="/calendar/data")
    public @ResponseBody String getUserCalendar(@RequestParam Integer id) {
        JSONArray responseArray = new JSONArray();

        List<Calendar> calendarList = calendarQueryInterface.finCalendarByCadastroId(id);
        if(calendarList != null && !calendarList.isEmpty()){

            for(Calendar calendar : calendarList){
                JSONObject jsonResponse = new JSONObject();
                try {
                    jsonResponse.put("type", calendar.getType());
                    jsonResponse.put("category", calendar.getCategory());
                    jsonResponse.put("prunningDate", calendar.getPrunningDate());
                    jsonResponse.put("harvestDate", calendar.getHarvestDate());
                    jsonResponse.put("harvestDays", calendar.getHarvestDays());
                    jsonResponse.put("prunningRestDays", calendar.getPrunningRestDays());
                    jsonResponse.put("producedAmountKg", calendar.getProducedAmountKg());

                    responseArray.put(jsonResponse);
                    
                } catch (JSONException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }

        return responseArray.toString();       
    }
        
}
